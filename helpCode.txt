using System.Globalization;
using System.Text.RegularExpressions;

Convert.ToInt64(hexString, 16);

Console.Write("Enter the Binary Number : ");
int binaryNumber = int.Parse(Console.ReadLine());
int decimalValue = 0;
// initializing base1 value to 1, i.e 2^0 
int base1 = 1;

while (binaryNumber > 0)
{
    int reminder = binaryNumber % 10;
    binaryNumber = binaryNumber / 10;
    decimalValue += reminder * base1;
    base1 = base1 * 2;
}
Console.Write($"Decimal Value : {decimalValue} ");


int dummy;
bool isHex = int.TryParse(str,
                          NumberStyles.HexNumber,
                          CultureInfo.InvariantCulture,
                          out dummy);

static bool isbin(string s)
{
    foreach (var c in s)
        if (c != '0' && c != '1')
            return false;
    return true;
}

Convert.ToInt32("1001101", 2).ToString();
int decValue = Convert.ToInt32(hexValue, 16);


            public static bool isItHex(string hc)
                {
                    return Regex.Match(hc, "^#[0-9a-fA-F]{6}$").Success;
                }
public static bool isItbin(string bin)
{
    return Regex.Match(bin, "[0-1]^#{6}$").Success;
}


static bool isItBinary(String s)
{
    int len = s.Length;

    // Find first occurrence of 1 in s[]
    int first = 0;
    for (int i = 0; i < len; i++)
    {
        if (s[i] == '1')
        {
            first = i;
            break;
        }
    }

    // Find last occurrence of 1 in s[]
    int last = 0;
    for (int i = len - 1; i >= 0; i--)
    {
        if (s[i] == '1')
        {
            last = i;
            break;
        }
    }

    // Check if there is any 0 in range
    for (int i = first; i <= last; i++)
        if (s[i] == '0')
            return false;

    return true;
}